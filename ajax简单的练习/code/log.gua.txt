17:20:12 完整请求
17:20:12 请求结束
17:20:12 cookie ['']
17:20:12 path and query /weibo/index {} 
17:20:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:20:12 完整请求
17:20:12 请求结束
17:20:12 cookie ['']
17:20:12 path and query /static {'file': 'gua.js'} 
17:20:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:20:12 完整请求
17:20:12 请求结束
17:20:12 cookie ['']
17:20:12 path and query /static {'file': 'weibo.js'} 
17:20:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Weibo = JSON.parse(r)
                insertWeibo(Weibo)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:20:12 完整请求
17:20:12 请求结束
17:20:12 cookie ['']
17:20:12 path and query /api/weibo/all {} 
17:20:12 kwargs,  {'weibo_id': 1} <class 'dict'>
17:20:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      }
    ]
  }
]
17:20:12 完整请求
17:20:12 请求结束
17:20:12 cookie ['']
17:20:12 path and query /static {'file': 'weibo.js'} 
17:20:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Weibo = JSON.parse(r)
                insertWeibo(Weibo)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:20:24 完整请求
17:20:24 请求结束
17:20:24 cookie ['']
17:20:24 path and query /api/comment/add {} {"weibo_id":"1","content":"大大"}
17:20:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "大大",
  "weibo_id": 1
}
17:29:27 完整请求
17:29:27 请求结束
17:29:27 cookie ['']
17:29:27 path and query /weibo/index {} 
17:29:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:29:27 完整请求
17:29:27 请求结束
17:29:27 cookie ['']
17:29:27 path and query /static {'file': 'gua.js'} 
17:29:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:29:27 完整请求
17:29:27 请求结束
17:29:27 cookie ['']
17:29:27 path and query /static {'file': 'weibo.js'} 
17:29:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:29:27 完整请求
17:29:27 请求结束
17:29:27 cookie ['']
17:29:27 path and query /api/weibo/all {} 
17:29:27 kwargs,  {'weibo_id': 1} <class 'dict'>
17:29:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "大大",
        "weibo_id": 1
      }
    ]
  }
]
17:29:28 完整请求
17:29:28 请求结束
17:29:28 cookie ['']
17:29:28 path and query /static {'file': 'weibo.js'} 
17:29:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:29:31 完整请求
17:29:31 请求结束
17:29:31 cookie ['']
17:29:31 path and query /api/comment/add {} {"weibo_id":"1","content":"大大"}
17:29:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "大大",
  "weibo_id": 1
}
17:29:34 完整请求
17:29:34 请求结束
17:29:34 cookie ['']
17:29:34 path and query /weibo/index {} 
17:29:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:29:35 完整请求
17:29:35 完整请求
17:29:35 请求结束
17:29:35 请求结束
17:29:35 cookie ['']
17:29:35 cookie ['']
17:29:35 path and query /static {'file': 'weibo.js'} 
17:29:35 path and query /static {'file': 'gua.js'} 
17:29:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:29:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:29:35 完整请求
17:29:35 请求结束
17:29:35 cookie ['']
17:29:35 path and query /api/weibo/all {} 
17:29:35 kwargs,  {'weibo_id': 1} <class 'dict'>
17:29:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 3,
        "content": "大大",
        "weibo_id": 1
      }
    ]
  }
]
17:29:35 完整请求
17:29:35 请求结束
17:29:35 cookie ['']
17:29:35 path and query /static {'file': 'weibo.js'} 
17:29:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:29:55 完整请求
17:29:55 请求结束
17:29:55 cookie ['']
17:29:55 path and query /weibo/index {} 
17:29:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:29:55 完整请求
17:29:55 完整请求
17:29:55 请求结束
17:29:55 请求结束
17:29:55 cookie ['']
17:29:55 cookie ['']
17:29:55 path and query /static {'file': 'weibo.js'} 
17:29:55 path and query /static {'file': 'gua.js'} 
17:29:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('Comment', Comment)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:29:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:29:55 完整请求
17:29:55 请求结束
17:29:55 cookie ['']
17:29:55 path and query /api/weibo/all {} 
17:29:55 kwargs,  {'weibo_id': 1} <class 'dict'>
17:29:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 3,
        "content": "大大",
        "weibo_id": 1
      }
    ]
  }
]
17:29:55 完整请求
17:29:55 请求结束
17:29:55 cookie ['']
17:29:55 path and query /static {'file': 'weibo.js'} 
17:29:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                log('Comment', Comment)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:30:00 完整请求
17:30:00 请求结束
17:30:00 cookie ['']
17:30:00 path and query /api/comment/add {} {"weibo_id":"1","content":"大大大个"}
17:30:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "大大大个",
  "weibo_id": 1
}
17:31:05 完整请求
17:31:05 请求结束
17:31:05 cookie ['']
17:31:05 path and query /weibo/index {} 
17:31:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:31:05 完整请求
17:31:05 完整请求
17:31:05 请求结束
17:31:05 请求结束
17:31:05 cookie ['']
17:31:05 cookie ['']
17:31:05 path and query /static {'file': 'weibo.js'} 
17:31:05 path and query /static {'file': 'gua.js'} 
17:31:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    log('commentCell:', commentCell)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:31:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:31:05 完整请求
17:31:05 请求结束
17:31:05 cookie ['']
17:31:05 path and query /api/weibo/all {} 
17:31:05 kwargs,  {'weibo_id': 1} <class 'dict'>
17:31:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 3,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 4,
        "content": "大大大个",
        "weibo_id": 1
      }
    ]
  }
]
17:31:05 完整请求
17:31:05 请求结束
17:31:05 cookie ['']
17:31:05 path and query /static {'file': 'weibo.js'} 
17:31:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = commentsTemplate(comment)
    log('commentCell:', commentCell)
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:31:09 完整请求
17:31:09 请求结束
17:31:09 cookie ['']
17:31:09 path and query /api/comment/add {} {"weibo_id":"1","content":"大大而过人"}
17:31:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "大大而过人",
  "weibo_id": 1
}
17:32:20 完整请求
17:32:20 请求结束
17:32:20 cookie ['']
17:32:20 path and query /weibo/index {} 
17:32:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:32:20 完整请求
17:32:20 完整请求
17:32:20 请求结束
17:32:20 cookie ['']
17:32:20 请求结束
17:32:20 cookie ['']
17:32:20 path and query /static {'file': 'gua.js'} 
17:32:20 path and query /static {'file': 'weibo.js'} 
17:32:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:32:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:32:20 完整请求
17:32:20 请求结束
17:32:20 cookie ['']
17:32:20 path and query /api/weibo/all {} 
17:32:20 kwargs,  {'weibo_id': 1} <class 'dict'>
17:32:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 3,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 4,
        "content": "大大大个",
        "weibo_id": 1
      },
      {
        "id": 5,
        "content": "大大而过人",
        "weibo_id": 1
      }
    ]
  }
]
17:32:21 完整请求
17:32:21 请求结束
17:32:21 cookie ['']
17:32:21 path and query /static {'file': 'weibo.js'} 
17:32:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    //bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:32:24 完整请求
17:32:24 请求结束
17:32:24 cookie ['']
17:32:24 path and query /api/comment/add {} {"weibo_id":"1","content":"1234556"}
17:32:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "1234556",
  "weibo_id": 1
}
17:32:27 完整请求
17:32:27 请求结束
17:32:27 cookie ['']
17:32:27 path and query /api/comment/add {} {"weibo_id":"1","content":"123455655"}
17:32:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "123455655",
  "weibo_id": 1
}
17:39:47 完整请求
17:39:47 请求结束
17:39:47 cookie ['']
17:39:47 path and query /weibo/index {} 
17:39:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:39:48 完整请求
17:39:48 完整请求
17:39:48 请求结束
17:39:48 请求结束
17:39:48 cookie ['']
17:39:48 cookie ['']
17:39:48 path and query /static {'file': 'weibo.js'} 
17:39:48 path and query /static {'file': 'gua.js'} 
17:39:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:39:48 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:39:48 完整请求
17:39:48 请求结束
17:39:48 cookie ['']
17:39:48 path and query /api/weibo/all {} 
17:39:48 kwargs,  {'weibo_id': 1} <class 'dict'>
17:39:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": [
      {
        "id": 1,
        "content": "大大大",
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 3,
        "content": "大大",
        "weibo_id": 1
      },
      {
        "id": 4,
        "content": "大大大个",
        "weibo_id": 1
      },
      {
        "id": 5,
        "content": "大大而过人",
        "weibo_id": 1
      },
      {
        "id": 6,
        "content": "1234556",
        "weibo_id": 1
      },
      {
        "id": 7,
        "content": "123455655",
        "weibo_id": 1
      }
    ]
  }
]
17:39:48 完整请求
17:39:48 请求结束
17:39:48 cookie ['']
17:39:48 path and query /static {'file': 'weibo.js'} 
17:39:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:39:49 完整请求
17:39:49 请求结束
17:39:49 cookie ['']
17:39:49 path and query /api/comment/delete {'id': '7'} 
17:39:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "123455655",
  "weibo_id": 1
}
17:39:52 完整请求
17:39:52 请求结束
17:39:52 cookie ['']
17:39:52 path and query /api/comment/delete {'id': '6'} 
17:39:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "1234556",
  "weibo_id": 1
}
17:39:53 完整请求
17:39:53 请求结束
17:39:53 cookie ['']
17:39:53 path and query /api/comment/delete {'id': '5'} 
17:39:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "大大而过人",
  "weibo_id": 1
}
17:39:54 完整请求
17:39:54 请求结束
17:39:54 cookie ['']
17:39:54 path and query /api/comment/delete {'id': '4'} 
17:39:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "大大大个",
  "weibo_id": 1
}
17:39:54 完整请求
17:39:54 请求结束
17:39:54 cookie ['']
17:39:54 path and query /api/comment/delete {'id': '3'} 
17:39:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "大大",
  "weibo_id": 1
}
17:39:55 完整请求
17:39:55 请求结束
17:39:55 cookie ['']
17:39:55 path and query /api/comment/delete {'id': '2'} 
17:39:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "大大",
  "weibo_id": 1
}
17:39:55 完整请求
17:39:55 请求结束
17:39:55 cookie ['']
17:39:55 path and query /api/comment/delete {'id': '1'} 
17:39:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "大大大",
  "weibo_id": 1
}
17:39:56 完整请求
17:39:56 请求结束
17:39:56 cookie ['']
17:39:56 path and query /weibo/index {} 
17:39:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:39:56 完整请求
17:39:56 请求结束
17:39:56 cookie ['']
17:39:56 path and query /static {'file': 'gua.js'} 
17:39:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:39:56 完整请求
17:39:56 请求结束
17:39:56 cookie ['']
17:39:56 path and query /static {'file': 'weibo.js'} 
17:39:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:39:56 完整请求
17:39:56 请求结束
17:39:56 cookie ['']
17:39:56 path and query /api/weibo/all {} 
17:39:56 kwargs,  {'weibo_id': 1} <class 'dict'>
17:39:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": []
  }
]
17:39:57 完整请求
17:39:57 请求结束
17:39:57 cookie ['']
17:39:57 path and query /static {'file': 'weibo.js'} 
17:39:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:40:01 完整请求
17:40:01 请求结束
17:40:01 cookie ['']
17:40:01 path and query /api/weibo/add {} {"content":"你好呀"}
17:40:01 kwargs,  {'weibo_id': 2} <class 'dict'>
17:40:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "你好呀",
  "comments": []
}
17:40:06 完整请求
17:40:06 请求结束
17:40:06 cookie ['']
17:40:06 path and query /api/weibo/add {} {"content":"大大"}
17:40:06 kwargs,  {'weibo_id': 3} <class 'dict'>
17:40:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "大大",
  "comments": []
}
17:40:09 完整请求
17:40:09 请求结束
17:40:09 cookie ['']
17:40:09 path and query /api/comment/add {} {"weibo_id":"2","content":"大大是"}
17:40:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "大大是",
  "weibo_id": 2
}
17:40:11 完整请求
17:40:11 请求结束
17:40:11 cookie ['']
17:40:11 path and query /api/comment/add {} {"weibo_id":"2","content":"大大是果然"}
17:40:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "大大是果然",
  "weibo_id": 2
}
17:40:13 完整请求
17:40:13 请求结束
17:40:13 cookie ['']
17:40:13 path and query /api/comment/add {} {"weibo_id":"2","content":"大大是果然额外 "}
17:40:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "大大是果然额外 ",
  "weibo_id": 2
}
17:40:14 完整请求
17:40:15 请求结束
17:40:15 cookie ['']
17:40:15 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 完整请求
17:40:19 请求结束
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 完整请求
17:40:19 请求结束
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 完整请求
17:40:19 请求结束
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 完整请求
17:40:19 请求结束
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 请求结束
17:40:19 完整请求
17:40:19 cookie ['']
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 请求结束
17:40:19 完整请求
17:40:19 cookie ['']
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 完整请求
17:40:19 请求结束
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 请求结束
17:40:19 完整请求
17:40:19 cookie ['']
17:40:19 请求结束
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 完整请求
17:40:19 请求结束
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:19 完整请求
17:40:19 请求结束
17:40:19 cookie ['']
17:40:19 path and query /api/comment/delete {'id': 'undefined'} 
17:40:20 完整请求
17:40:20 请求结束
17:40:20 cookie ['']
17:40:20 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 完整请求
17:40:21 请求结束
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 请求结束
17:40:21 完整请求
17:40:21 cookie ['']
17:40:21 请求结束
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:21 完整请求
17:40:21 请求结束
17:40:21 cookie ['']
17:40:21 path and query /api/comment/delete {'id': 'undefined'} 
17:40:30 完整请求
17:40:30 请求结束
17:40:30 cookie ['']
17:40:30 path and query /api/comment/add {} {"weibo_id":"3","content":"服务额外g"}
17:40:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "服务额外g",
  "weibo_id": 3
}
17:40:30 完整请求
17:40:30 请求结束
17:40:30 cookie ['']
17:40:30 path and query /api/comment/add {} {"weibo_id":"3","content":"服务额外g"}
17:40:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "服务额外g",
  "weibo_id": 3
}
17:40:31 完整请求
17:40:31 请求结束
17:40:31 cookie ['']
17:40:31 path and query /api/comment/add {} {"weibo_id":"3","content":"服务额外g"}
17:40:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "服务额外g",
  "weibo_id": 3
}
17:40:31 完整请求
17:40:31 请求结束
17:40:31 cookie ['']
17:40:31 path and query /api/comment/add {} {"weibo_id":"3","content":"服务额外g"}
17:40:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "服务额外g",
  "weibo_id": 3
}
17:40:31 完整请求
17:40:31 请求结束
17:40:31 cookie ['']
17:40:31 path and query /api/comment/add {} {"weibo_id":"3","content":"服务额外g"}
17:40:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "服务额外g",
  "weibo_id": 3
}
17:40:32 完整请求
17:40:32 请求结束
17:40:32 cookie ['']
17:40:32 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 完整请求
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 完整请求
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 完整请求
17:40:41 请求结束
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 完整请求
17:40:41 请求结束
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 请求结束
17:40:41 完整请求
17:40:41 cookie ['']
17:40:41 请求结束
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 请求结束
17:40:41 完整请求
17:40:41 cookie ['']
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 请求结束
17:40:41 完整请求
17:40:41 cookie ['']
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 请求结束
17:40:41 完整请求
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 请求结束
17:40:41 完整请求
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 完整请求
17:40:41 完整请求
17:40:41 请求结束
17:40:41 请求结束
17:40:41 cookie ['']
17:40:41 cookie ['']
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:41 path and query /api/comment/delete {'id': 'undefined'} 
17:40:42 完整请求
17:40:42 请求结束
17:40:42 cookie ['']
17:40:42 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 完整请求
17:40:43 请求结束
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 完整请求
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 请求结束
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 完整请求
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 完整请求
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 完整请求
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 完整请求
17:40:43 cookie ['']
17:40:43 请求结束
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 完整请求
17:40:43 cookie ['']
17:40:43 请求结束
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 完整请求
17:40:43 cookie ['']
17:40:43 请求结束
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 完整请求
17:40:43 cookie ['']
17:40:43 请求结束
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 完整请求
17:40:43 请求结束
17:40:43 完整请求
17:40:43 cookie ['']
17:40:43 请求结束
17:40:43 cookie ['']
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:43 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 完整请求
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 完整请求
17:40:44 完整请求
17:40:44 请求结束
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 cookie ['']
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 完整请求
17:40:44 请求结束
17:40:44 完整请求
17:40:44 cookie ['']
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 完整请求
17:40:44 请求结束
17:40:44 完整请求
17:40:44 cookie ['']
17:40:44 请求结束
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 cookie ['']
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 完整请求
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 完整请求
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 完整请求
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 完整请求
17:40:44 完整请求
17:40:44 请求结束
17:40:44 请求结束
17:40:44 cookie ['']
17:40:44 cookie ['']
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:44 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 完整请求
17:40:45 请求结束
17:40:45 完整请求
17:40:45 请求结束
17:40:45 cookie ['']
17:40:45 cookie ['']
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 完整请求
17:40:45 完整请求
17:40:45 请求结束
17:40:45 请求结束
17:40:45 cookie ['']
17:40:45 cookie ['']
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 完整请求
17:40:45 请求结束
17:40:45 完整请求
17:40:45 cookie ['']
17:40:45 请求结束
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 cookie ['']
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 完整请求
17:40:45 请求结束
17:40:45 完整请求
17:40:45 请求结束
17:40:45 cookie ['']
17:40:45 cookie ['']
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:45 完整请求
17:40:45 请求结束
17:40:45 cookie ['']
17:40:45 path and query /api/comment/delete {'id': 'undefined'} 
17:40:48 完整请求
17:40:48 请求结束
17:40:48 完整请求
17:40:48 cookie ['']
17:40:48 请求结束
17:40:48 path and query /api/comment/add {} {"weibo_id":"3","content":"1"}
17:40:48 cookie ['']
17:40:48 path and query /api/comment/delete {'id': 'undefined'} 
17:40:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "1",
  "weibo_id": 3
}
17:40:50 完整请求
17:40:50 请求结束
17:40:50 完整请求
17:40:50 cookie ['']
17:40:50 请求结束
17:40:50 path and query /api/comment/add {} {"weibo_id":"3","content":"2"}
17:40:50 cookie ['']
17:40:50 path and query /api/comment/delete {'id': 'undefined'} 
17:40:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "2",
  "weibo_id": 3
}
17:40:51 完整请求
17:40:51 请求结束
17:40:51 完整请求
17:40:51 cookie ['']
17:40:51 请求结束
17:40:51 path and query /api/comment/add {} {"weibo_id":"3","content":"3"}
17:40:51 cookie ['']
17:40:51 path and query /api/comment/delete {'id': 'undefined'} 
17:40:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "3",
  "weibo_id": 3
}
17:40:52 完整请求
17:40:52 完整请求
17:40:52 请求结束
17:40:52 请求结束
17:40:52 cookie ['']
17:40:52 cookie ['']
17:40:52 path and query /api/comment/delete {'id': 'undefined'} 
17:40:52 path and query /api/comment/add {} {"weibo_id":"3","content":"4"}
17:40:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "4",
  "weibo_id": 3
}
17:40:54 完整请求
17:40:54 请求结束
17:40:54 cookie ['']
17:40:54 完整请求
17:40:54 path and query /api/comment/add {} {"weibo_id":"3","content":"5"}
17:40:54 请求结束
17:40:54 cookie ['']
17:40:54 path and query /api/comment/delete {'id': 'undefined'} 
17:40:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "5",
  "weibo_id": 3
}
17:40:55 完整请求
17:40:55 完整请求
17:40:55 请求结束
17:40:55 请求结束
17:40:55 cookie ['']
17:40:55 cookie ['']
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 完整请求
17:40:55 请求结束
17:40:55 完整请求
17:40:55 cookie ['']
17:40:55 请求结束
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 cookie ['']
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 完整请求
17:40:55 请求结束
17:40:55 cookie ['']
17:40:55 完整请求
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 请求结束
17:40:55 cookie ['']
17:40:55 完整请求
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 请求结束
17:40:55 cookie ['']
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 完整请求
17:40:55 完整请求
17:40:55 请求结束
17:40:55 请求结束
17:40:55 cookie ['']
17:40:55 cookie ['']
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:55 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 完整请求
17:40:56 请求结束
17:40:56 完整请求
17:40:56 请求结束
17:40:56 cookie ['']
17:40:56 cookie ['']
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 完整请求
17:40:56 完整请求
17:40:56 请求结束
17:40:56 请求结束
17:40:56 cookie ['']
17:40:56 cookie ['']
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 完整请求
17:40:56 完整请求
17:40:56 请求结束
17:40:56 请求结束
17:40:56 cookie ['']
17:40:56 cookie ['']
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 完整请求
17:40:56 完整请求
17:40:56 请求结束
17:40:56 请求结束
17:40:56 cookie ['']
17:40:56 cookie ['']
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 完整请求
17:40:56 完整请求
17:40:56 请求结束
17:40:56 请求结束
17:40:56 cookie ['']
17:40:56 cookie ['']
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:56 完整请求
17:40:56 请求结束
17:40:56 cookie ['']
17:40:56 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 完整请求
17:40:57 完整请求
17:40:57 请求结束
17:40:57 cookie ['']
17:40:57 请求结束
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 cookie ['']
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 完整请求
17:40:57 请求结束
17:40:57 cookie ['']
17:40:57 完整请求
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 请求结束
17:40:57 完整请求
17:40:57 cookie ['']
17:40:57 请求结束
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 cookie ['']
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 完整请求
17:40:57 请求结束
17:40:57 完整请求
17:40:57 cookie ['']
17:40:57 请求结束
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 cookie ['']
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 完整请求
17:40:57 请求结束
17:40:57 完整请求
17:40:57 cookie ['']
17:40:57 请求结束
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:57 cookie ['']
17:40:57 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 完整请求
17:40:58 完整请求
17:40:58 请求结束
17:40:58 cookie ['']
17:40:58 请求结束
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 完整请求
17:40:58 请求结束
17:40:58 完整请求
17:40:58 cookie ['']
17:40:58 请求结束
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 完整请求
17:40:58 完整请求
17:40:58 请求结束
17:40:58 请求结束
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 完整请求
17:40:58 请求结束
17:40:58 完整请求
17:40:58 cookie ['']
17:40:58 请求结束
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 完整请求
17:40:58 请求结束
17:40:58 完整请求
17:40:58 cookie ['']
17:40:58 请求结束
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:58 完整请求
17:40:58 请求结束
17:40:58 cookie ['']
17:40:58 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 完整请求
17:40:59 请求结束
17:40:59 完整请求
17:40:59 cookie ['']
17:40:59 请求结束
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 cookie ['']
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 完整请求
17:40:59 请求结束
17:40:59 cookie ['']
17:40:59 完整请求
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 请求结束
17:40:59 cookie ['']
17:40:59 完整请求
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 请求结束
17:40:59 cookie ['']
17:40:59 完整请求
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 请求结束
17:40:59 cookie ['']
17:40:59 完整请求
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 请求结束
17:40:59 cookie ['']
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 完整请求
17:40:59 请求结束
17:40:59 完整请求
17:40:59 cookie ['']
17:40:59 请求结束
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:40:59 cookie ['']
17:40:59 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 完整请求
17:41:01 请求结束
17:41:01 完整请求
17:41:01 cookie ['']
17:41:01 请求结束
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 cookie ['']
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 完整请求
17:41:01 完整请求
17:41:01 请求结束
17:41:01 请求结束
17:41:01 cookie ['']
17:41:01 cookie ['']
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 完整请求
17:41:01 完整请求
17:41:01 请求结束
17:41:01 请求结束
17:41:01 cookie ['']
17:41:01 cookie ['']
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 完整请求
17:41:01 完整请求
17:41:01 请求结束
17:41:01 请求结束
17:41:01 cookie ['']
17:41:01 cookie ['']
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 完整请求
17:41:01 请求结束
17:41:01 完整请求
17:41:01 cookie ['']
17:41:01 请求结束
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 cookie ['']
17:41:01 path and query /api/comment/delete {'id': 'undefined'} 
17:41:01 完整请求
17:41:02 请求结束
17:41:02 cookie ['']
17:41:02 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 完整请求
18:31:46 完整请求
18:31:46 请求结束
18:31:46 cookie ['']
18:31:46 请求结束
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 cookie ['']
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 完整请求
18:31:46 完整请求
18:31:46 请求结束
18:31:46 cookie ['']
18:31:46 请求结束
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 cookie ['']
18:31:46 完整请求
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 请求结束
18:31:46 cookie ['']
18:31:46 完整请求
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 请求结束
18:31:46 cookie ['']
18:31:46 完整请求
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 请求结束
18:31:46 cookie ['']
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 完整请求
18:31:46 请求结束
18:31:46 完整请求
18:31:46 cookie ['']
18:31:46 请求结束
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:31:46 cookie ['']
18:31:46 path and query /api/comment/delete {'id': 'undefined'} 
18:42:16 完整请求
18:42:16 请求结束
18:42:16 cookie ['']
18:42:16 path and query /weibo/index {} 
18:42:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:42:16 完整请求
18:42:16 请求结束
18:42:16 cookie ['']
18:42:16 完整请求
18:42:16 path and query /static {'file': 'gua.js'} 
18:42:16 请求结束
18:42:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
18:42:16 cookie ['']
18:42:16 path and query /static {'file': 'weibo.js'} 
18:42:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}' data-id='${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:42:16 完整请求
18:42:16 请求结束
18:42:16 cookie ['']
18:42:16 path and query /api/weibo/all {} 
18:42:16 kwargs,  {'weibo_id': 1} <class 'dict'>
18:42:16 kwargs,  {'weibo_id': 2} <class 'dict'>
18:42:16 kwargs,  {'weibo_id': 3} <class 'dict'>
18:42:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": []
  },
  {
    "id": 2,
    "content": "你好呀",
    "comments": [
      {
        "id": 1,
        "content": "大大是",
        "weibo_id": 2
      },
      {
        "id": 2,
        "content": "大大是果然",
        "weibo_id": 2
      },
      {
        "id": 3,
        "content": "大大是果然额外 ",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "大大",
    "comments": [
      {
        "id": 4,
        "content": "服务额外g",
        "weibo_id": 3
      },
      {
        "id": 5,
        "content": "服务额外g",
        "weibo_id": 3
      },
      {
        "id": 6,
        "content": "服务额外g",
        "weibo_id": 3
      },
      {
        "id": 7,
        "content": "服务额外g",
        "weibo_id": 3
      },
      {
        "id": 8,
        "content": "服务额外g",
        "weibo_id": 3
      },
      {
        "id": 9,
        "content": "1",
        "weibo_id": 3
      },
      {
        "id": 10,
        "content": "2",
        "weibo_id": 3
      },
      {
        "id": 11,
        "content": "3",
        "weibo_id": 3
      },
      {
        "id": 12,
        "content": "4",
        "weibo_id": 3
      },
      {
        "id": 13,
        "content": "5",
        "weibo_id": 3
      }
    ]
  }
]
18:42:16 完整请求
18:42:16 请求结束
18:42:16 cookie ['']
18:42:16 path and query /static {'file': 'weibo.js'} 
18:42:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}' data-id='${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:42:18 完整请求
18:42:18 请求结束
18:42:18 cookie ['']
18:42:18 path and query /api/comment/delete {'id': '9'} 
18:42:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "1",
  "weibo_id": 3
}
18:42:19 完整请求
18:42:19 请求结束
18:42:19 cookie ['']
18:42:19 path and query /api/comment/delete {'id': '10'} 
18:42:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "2",
  "weibo_id": 3
}
18:42:20 完整请求
18:42:20 请求结束
18:42:20 cookie ['']
18:42:20 path and query /api/comment/delete {'id': '11'} 
18:42:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "3",
  "weibo_id": 3
}
18:42:21 完整请求
18:42:21 请求结束
18:42:21 cookie ['']
18:42:21 path and query /api/comment/delete {'id': '6'} 
18:42:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "服务额外g",
  "weibo_id": 3
}
18:42:22 完整请求
18:42:22 请求结束
18:42:22 cookie ['']
18:42:22 path and query /api/comment/delete {'id': '5'} 
18:42:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "服务额外g",
  "weibo_id": 3
}
18:42:22 完整请求
18:42:22 请求结束
18:42:22 cookie ['']
18:42:22 path and query /api/comment/delete {'id': '4'} 
18:42:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "服务额外g",
  "weibo_id": 3
}
18:42:23 完整请求
18:42:23 请求结束
18:42:23 cookie ['']
18:42:23 path and query /api/comment/delete {'id': '8'} 
18:42:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "服务额外g",
  "weibo_id": 3
}
18:42:24 完整请求
18:42:24 请求结束
18:42:24 cookie ['']
18:42:24 path and query /api/comment/delete {'id': '7'} 
18:42:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "服务额外g",
  "weibo_id": 3
}
18:42:25 完整请求
18:42:25 请求结束
18:42:25 cookie ['']
18:42:25 path and query /weibo/index {} 
18:42:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: yellow;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:42:25 完整请求
18:42:25 请求结束
18:42:25 完整请求
18:42:25 cookie ['']
18:42:25 请求结束
18:42:25 path and query /static {'file': 'weibo.js'} 
18:42:25 cookie ['']
18:42:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}' data-id='${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:42:25 path and query /static {'file': 'gua.js'} 
18:42:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

// 删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
18:42:25 完整请求
18:42:25 请求结束
18:42:25 cookie ['']
18:42:25 path and query /api/weibo/all {} 
18:42:25 kwargs,  {'weibo_id': 1} <class 'dict'>
18:42:25 kwargs,  {'weibo_id': 2} <class 'dict'>
18:42:25 kwargs,  {'weibo_id': 3} <class 'dict'>
18:42:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "哈哈",
    "comments": []
  },
  {
    "id": 2,
    "content": "你好呀",
    "comments": [
      {
        "id": 1,
        "content": "大大是",
        "weibo_id": 2
      },
      {
        "id": 2,
        "content": "大大是果然",
        "weibo_id": 2
      },
      {
        "id": 3,
        "content": "大大是果然额外 ",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "大大",
    "comments": [
      {
        "id": 12,
        "content": "4",
        "weibo_id": 3
      },
      {
        "id": 13,
        "content": "5",
        "weibo_id": 3
      }
    ]
  }
]
18:42:26 完整请求
18:42:26 请求结束
18:42:26 cookie ['']
18:42:26 path and query /static {'file': 'weibo.js'} 
18:42:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div id='comment-${c.id}' data-id='${c.id}'>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
          <span class='weibo-content'>[WEIBO]: ${content}</span>
          <button class="weibo-delete">删除微博</button>
          <button class="weibo-edit">编辑微博</button>
          <div class="comment-form" >
            <input type="hidden" class="comment-weibo-id" value="">
            <input class="comment-content">
            <br>
            <button class="comment-add">添加评论</button>
          </div>
          <div class="comment-list">
            ${comments}
          </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}


var insertComment = function(comment) {
    var commentCell = `
            <div id='comment-${comment.id}' data-id='${comment.id}'>
                ${comment.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
    // 插入 Weibo-list
    var selector = '#weibo-' + comment.weibo_id
    var weibocell = e(selector)
    var commentList = weibocell.querySelector('.comment-list')
    commentList.insertAdjacentHTML('beforeend', commentCell)
}


var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form' id='edit-form-${cell.dataset.id}' data-id='${cell.dataset.id}'>
            <input class="weibo-update-content">
            <button class='weibo-update'>更新微博</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            log('WeiboCell : ', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('weibo id : ', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 隐藏这个 Weibo
            var WeiboCell = self.parentElement
            WeiboCell.style.display = 'none'
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var weibo_id = editForm.dataset.id
            var input = editForm.querySelector('.weibo-update-content')
            var content = input.value
            var form = {
                'id': weibo_id,
                'content': content,
            }
            log('form:', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功')
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
                selector = '#edit-form-'+ Weibo.id
                log("selector", selector)
                editform = e(selector)
                editform.remove()
                WeiboCell.style.display = 'block'

//                WeiboCell.remove()
            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了 comment-add ')
            var commentForm = self.parentElement
            var input = commentForm.querySelector('.comment-content')
            var content = input.value
            var weibocell = input.closest('.weibo-cell')
            var weibo_id = weibocell.dataset.id
            log('click add', content)
            var form = {
                'weibo_id': weibo_id,
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var Comment = JSON.parse(r)
                insertComment(Comment)
            })
        }
    })
}


var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Weibo
            var commentCell = self.parentElement
            var comment_id = commentCell.dataset.id
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:42:27 完整请求
18:42:27 请求结束
18:42:27 cookie ['']
18:42:27 path and query /api/comment/delete {'id': '2'} 
18:42:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "大大是果然",
  "weibo_id": 2
}
18:42:30 完整请求
18:42:30 请求结束
18:42:30 cookie ['']
18:42:30 path and query /api/comment/delete {'id': '1'} 
18:42:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "大大是",
  "weibo_id": 2
}
18:42:31 完整请求
18:42:31 请求结束
18:42:31 cookie ['']
18:42:31 path and query /api/comment/delete {'id': '13'} 
18:42:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "5",
  "weibo_id": 3
}
18:42:32 完整请求
18:42:32 请求结束
18:42:32 cookie ['']
18:42:32 path and query /api/comment/delete {'id': '12'} 
18:42:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "4",
  "weibo_id": 3
}
18:42:33 完整请求
18:42:33 请求结束
18:42:33 cookie ['']
18:42:33 path and query /api/comment/delete {'id': '3'} 
18:42:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "大大是果然额外 ",
  "weibo_id": 2
}
18:42:39 完整请求
18:42:39 请求结束
18:42:39 cookie ['']
18:42:39 path and query /api/weibo/update {} {"id":"1","content":"嘻嘻"}
18:42:39 kwargs,  {'id': 1} <class 'dict'>
18:42:39 debug 0
18:42:39 kwargs,  {'weibo_id': 1} <class 'dict'>
18:42:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "嘻嘻",
  "comments": []
}
18:42:45 完整请求
18:42:45 请求结束
18:42:45 cookie ['']
18:42:45 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:46 完整请求
18:42:46 请求结束
18:42:46 cookie ['']
18:42:46 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:46 完整请求
18:42:46 请求结束
18:42:46 cookie ['']
18:42:46 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:47 完整请求
18:42:47 请求结束
18:42:47 cookie ['']
18:42:47 path and query /api/comment/delete {'id': '2'} 
18:42:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:47 完整请求
18:42:47 请求结束
18:42:47 cookie ['']
18:42:47 path and query /api/comment/delete {'id': '1'} 
18:42:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:48 完整请求
18:42:48 请求结束
18:42:48 cookie ['']
18:42:48 path and query /api/comment/delete {'id': '3'} 
18:42:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:51 完整请求
18:42:51 请求结束
18:42:51 cookie ['']
18:42:51 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:52 完整请求
18:42:52 请求结束
18:42:52 cookie ['']
18:42:52 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:52 完整请求
18:42:52 请求结束
18:42:52 cookie ['']
18:42:52 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:52 完整请求
18:42:52 请求结束
18:42:52 cookie ['']
18:42:52 path and query /api/comment/add {} {"weibo_id":"1","content":"嘿嘿"}
18:42:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "嘿嘿",
  "weibo_id": 1
}
18:42:54 完整请求
18:42:54 请求结束
18:42:54 cookie ['']
18:42:54 path and query /api/weibo/delete {'id': '1'} 
18:42:54 kwargs,  {'weibo_id': 1} <class 'dict'>
18:42:54 kwargs,  {'weibo_id': 1} <class 'dict'>
18:42:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "嘻嘻",
  "comments": []
}
